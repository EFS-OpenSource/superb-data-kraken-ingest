# Template parameters
parameters:
- name: stage
  type: string
  values:
  - 'dev'
  - 'prod'
  default: 'dev'

variables:
  ${{ if eq(parameters.stage, 'prod') }}:
    tagVersion: '$(Build.BuildId)'
    tagLatest: 'latest'
    postfix: ''
  ${{ if eq(parameters.stage, 'dev') }}:
    tagVersion: '$(Build.BuildId)-dev'
    tagLatest: 'latest-dev'
    postfix: '-dev'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: build_skipvalidation
    displayName: Build skipvalidation
    steps:
    - task: Docker@2
      displayName: Build and push skipvalidation-image to container registry
      inputs:
        command: buildAndPush
        repository: skipvalidation
        dockerfile: batch/skip_validation/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagVersion)
          $(tagLatest)
  - job: build_basicmetadata
    displayName: Build basicmetadata
    steps:
    - task: Docker@2
      displayName: Build and push basicmetadata-image to container registry
      inputs:
        command: buildAndPush
        repository: basicmetadata
        dockerfile: batch/basic_metadata/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagVersion)
          $(tagLatest)
  - job: build_movedata
    displayName: Build movedata
    steps:
    - task: Docker@2
      displayName: Build and push movedata-image to container registry
      inputs:
        command: buildAndPush
        repository: movedata
        dockerfile: batch/move_data/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagVersion)
          $(tagLatest)
  - job: build_metadataindex
    displayName: Build metadataindex
    steps:
    - task: Docker@2
      displayName: Build and push metadataindex-image to container registry
      inputs:
        command: buildAndPush
        repository: metadataindex
        dockerfile: batch/metadata_index/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagVersion)
          $(tagLatest)
  - job: build_ingest
    displayName: Build ingest
    steps:
    - publish: argo
      artifact: kubernetes

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            inputs:
              script: |
                echo "environment is $(environment)"
          - task: replacetokens@3
            inputs:
              rootDirectory: '$(Pipeline.Workspace)'
              targetFiles: 'kubernetes/*.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '$('
              tokenSuffix: ')'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: 'argo-mgmt'
              manifests: |
                $(Pipeline.Workspace)/kubernetes/auth-secret.yml
                $(Pipeline.Workspace)/kubernetes/config-map.yml
                $(Pipeline.Workspace)/kubernetes/ingest-sensor.yml
